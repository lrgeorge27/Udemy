Node.js handled I/O - input/output scalability, not computational scalability. 
Impt that reading from db doesn't slow down the the process
- when asynchronous I/O methods run the use callback functions to deliver data.
Computational blocker - process where code takes quite a while to execute, it blocks the actual named process
- non-blocking computations use spawn processes to run computations separately. 

npm install - will install all dependencies needed 

npm install --production - installs all dependencies except those marked dev

app. set - defines a property of the application
app.get - retreives

Routes:

Separation of concerns - move different types of code into different places to keep them separate from each other
 - separate logic from routing, UI, data models

Level 12
Controller - controls what happens when a certain route is visited.
No hard coded data in route or controllers

Level 13
URL Parameters

query strings for get requests
forms for post requests
paganation - count and offset

Need middleware for posted form - npm body parser

Nodemon - utility that monitors node app for changes and restarts app when changes have been made
-> great for development and never used for production
-> looks in package.json for scripts.start -> use to run
-> configure nodemon with nodemon.json in root folder
    {
    "ignore": ["public/*"] --> ignore all changes in public folder /* means all 
    "verbose": true  --> output is more detailed
    }

Level 18: MongoDB

MongoDB shell version: 2.6.12
connecting to: test
Server has startup warnings: 
2018-02-03T01:18:30.562+0000 ** WARNING: --rest is specified without --httpinterface,
2018-02-03T01:18:30.562+0000 **          enabling http interface
> show dbs
admin  (empty)
local  0.078GB
> use local
switched to db local
> show collections
startup_log
system.indexes
> use meantest
switched to db meantest
> show dbs
admin  (empty)
local  0.078GB
> show collections
> db.createCollection("tech")
{ "ok" : 1 }
> show dbs
admin     (empty)
local     0.078GB
meantest  0.078GB
> show collections
system.indexes
tech
> db.tech.insert({name: "MongoDB", role: "Database"})
WriteResult({ "nInserted" : 1 })
> db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
> db.tech.find().pretty()
{
        "_id" : ObjectId("5a751172b753db22d4edafdd"),
        "name" : "MongoDB",
        "role" : "Database"
}
> db.tech.insert(
... [
...     {
...     name: "Express", 
...     role: "Web application server"
...     }, 
...     {
...     name: "Angular", 
...     role: "Front-end framework"
...     },
...     {
...     name: "Node",
...     role: "Platform"
...     }
... ])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 3,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.tech.find().pretty()
{
        "_id" : ObjectId("5a751172b753db22d4edafdd"),
        "name" : "MongoDB",
        "role" : "Database"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafde"),
        "name" : "Express",
        "role" : "Web application server"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafdf"),
        "name" : "Angular",
        "role" : "Front-end framework"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafe0"),
        "name" : "Node",
        "role" : "Platform"
}
> 

db.tech.insert(
[
    {
    name: "Express", 
    role: "Web application server"
    }, 
    {
    name: "Angular", 
    role: "Front-end framework"
    },
    {
    name: "Node",
    role: "Platform"
    }
])
Level 19
lrgeorge27:~/workspace $ mongo
MongoDB shell version: 2.6.12
connecting to: test
Server has startup warnings: 
2018-02-03T12:41:26.600+0000 ** WARNING: --rest is specified without --httpinterface,
2018-02-03T12:41:26.600+0000 **          enabling http interface
> show dbs
admin     (empty)
local     0.078GB
meantest  0.078GB
> use meantest
switched to db meantest
> show collections
system.indexes
tech
> db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "Angular", "role" : "Front-end framework" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform" }
> db.tech.find({"_id" : ObjectId("5a751172b753db22d4edafdd")})
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
> db.tech.find({"name": "Angular"})
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "Angular", "role" : "Front-end framework" }
> db.tech.find().sort({name: 1})
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "Angular", "role" : "Front-end framework" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform" }
> db.tech.find().sort({name: -1})
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform" }
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "Angular", "role" : "Front-end framework" }
//projection, {} returns all documents
> db.tech.find({}, {name: true})
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "Angular" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node" }
> db.tech.find({}, {name: true, _id: false})
{ "name" : "MongoDB" }
{ "name" : "Express" }
{ "name" : "Angular" }
{ "name" : "Node" }
> db.tech.find({}, {name: 1, _id: 0})
{ "name" : "MongoDB" }
{ "name" : "Express" }
{ "name" : "Angular" }
{ "name" : "Node" }
> db.tech.update(
    {name: "Angular"}, 
    {$set: {name: "AngularJS"}}
    )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
 db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "AngularJS", "role" : "Front-end framework" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform" }
> db.tech.update(     {},      {$set: {language: "JavaScript"}}, {multi: true})
WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })
> db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database", "language" : "JavaScript" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafde"), "name" : "Express", "role" : "Web application server", "language" : "JavaScript" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "AngularJS", "role" : "Front-end framework", "language" : "JavaScript" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform", "language" : "JavaScript" }
//Remove a document
> db.tech.remove({name: "Express"})
WriteResult({ "nRemoved" : 1 })
> db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database", "language" : "JavaScript" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafdf"), "name" : "AngularJS", "role" : "Front-end framework", "language" : "JavaScript" }
{ "_id" : ObjectId("5a7512e6b753db22d4edafe0"), "name" : "Node", "role" : "Platform", "language" : "JavaScript" }
//WARNING! db.tech.remove({}) --> deletes ALL the documents in a collection
//Remove a collection
> db.tech.drop()
true
> show collections
system.indexes

Level 20 - Exporting and Importing Data with MongoDB
--pretty and --gzip not recognized in c9

Exporting ALL DBs --> BSON, recommended:
lrgeorge27:~/workspace/Udemy (Section2) $ mongodump
connected to: 127.0.0.1
2018-02-03T13:12:15.852+0000 all dbs
2018-02-03T13:12:15.853+0000 DATABASE: meantest  to     dump/meantest
2018-02-03T13:12:15.853+0000    meantest.system.indexes to dump/meantest/system.indexes.bson
2018-02-03T13:12:15.854+0000             1 documents
2018-02-03T13:12:15.854+0000    meantest.tech to dump/meantest/tech.bson
2018-02-03T13:12:15.961+0000             4 documents
2018-02-03T13:12:15.961+0000    Metadata for meantest.tech to dump/meantest/tech.metadata.json
2018-02-03T13:12:15.961+0000 DATABASE: admin     to     dump/admin
lrgeorge27:~/workspace/Udemy (Section2) $ cd dump
lrgeorge27:~/workspace/Udemy/dump (Section2) $ ls
admin/  meantest/

Export Single DB:
lrgeorge27:~/workspace/Udemy (Section2) $ mongodump --db meantest
connected to: 127.0.0.1
2018-02-03T13:15:35.708+0000 DATABASE: meantest  to     dump/meantest
2018-02-03T13:15:35.708+0000    meantest.system.indexes to dump/meantest/system.indexes.bson
2018-02-03T13:15:35.709+0000             1 documents
2018-02-03T13:15:35.709+0000    meantest.tech to dump/meantest/tech.bson
2018-02-03T13:15:35.709+0000             4 documents
2018-02-03T13:15:35.710+0000    Metadata for meantest.tech to dump/meantest/tech.metadata.json

Import DB --> BSON, recommended:
lrgeorge27:~/workspace/Udemy (Section2) $ mongorestore --db mean2 dump/meantest
connected to: 127.0.0.1
2018-02-03T13:25:54.361+0000 dump/meantest/tech.bson
2018-02-03T13:25:54.361+0000    going into namespace [mean2.tech]
4 objects found
2018-02-03T13:25:54.362+0000    Creating index: { key: { _id: 1 }, name: "_id_", ns: "mean2.tech" }

In Shell:
> show dbs
admin     (empty)
local     0.078GB
mean2     0.078GB
meantest  0.078GB
> use mean2
switched to db mean2
> show collections
system.indexes
tech
> db.tech.find()
{ "_id" : ObjectId("5a75b449aa7911a2763ec923"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a75b449aa7911a2763ec924"), "name" : "Angular", "role" : "Front-end framework" }
{ "_id" : ObjectId("5a75b449aa7911a2763ec925"), "name" : "Node", "role" : "Platform" }
{ "_id" : ObjectId("5a75b48aaa7911a2763ec926"), "name" : "MongoDB" }

Mongorestore --> only inserts, it does not update the db, only puts in new doc with unique ids

Export JSON:
mongoexport --db meantest --collection tech (exports to console)
mongoexport --db meantest --collection tech --out ./api/data/tech.json (exports to file)
mongoexport --db meantest --collection tech --out ./api/data/tech.json --jsonArray

lrgeorge27:~/workspace/Udemy (Section2) $ mongoexport --db meantest --collection tech
connected to: 127.0.0.1
{ "_id" : { "$oid" : "5a75b449aa7911a2763ec923" }, "name" : "Express", "role" : "Web application server" }
{ "_id" : { "$oid" : "5a75b449aa7911a2763ec924" }, "name" : "Angular", "role" : "Front-end framework" }
{ "_id" : { "$oid" : "5a75b449aa7911a2763ec925" }, "name" : "Node", "role" : "Platform" }
{ "_id" : { "$oid" : "5a75b48aaa7911a2763ec926" }, "name" : "MongoDB" }
exported 4 records
lrgeorge27:~/workspace/Udemy (Section2) $ mongoexport --db meantest --collection tech --out ./api/data/tech.json
connected to: 127.0.0.1
exported 4 records
lrgeorge27:~/workspace/Udemy (Section2) $ mongoexport --db meantest --collection tech --out ./api/data/tech.json --jsonArray
connected to: 127.0.0.1
exported 4 records

Importing JSON:
mongoimport --db mean3 --collection tech --jsonArray ./api/data/tech.json
lrgeorge27:~/workspace/Udemy (Section2) $ mongoimport --db mean3 --collection tech --jsonArray ./api/data/tech.json
connected to: 127.0.0.1
2018-02-03T13:42:56.433+0000 imported 4 objects

> show dbs
admin     (empty)
local     0.078GB
mean2     0.078GB
mean3     0.078GB
meantest  0.078GB
> use mean3
switched to db mean3
> show collections
system.indexes
tech
> db.tech.find()
{ "_id" : ObjectId("5a75b449aa7911a2763ec923"), "name" : "Express", "role" : "Web application server" }
{ "_id" : ObjectId("5a75b449aa7911a2763ec924"), "name" : "Angular", "role" : "Front-end framework" }
{ "_id" : ObjectId("5a75b449aa7911a2763ec925"), "name" : "Node", "role" : "Platform" }
{ "_id" : ObjectId("5a75b48aaa7911a2763ec926"), "name" : "MongoDB" }
> 

Rest APIs:

Method:     URL:                Action:
GET         /api/hotels         Get all/multiple hotels
POST        /api/hotels         Create a new hotel
GET         /api/hotels/12345   Get a specific hotel
PUT         /api/hotels/12345   Update a specific hotel
DELETE      /api/hotels/12345   Delete a specific hotel

Nested Documents -  Need to reference from parent document
Method:     URL:                            Action:
GET         /api/hotels/12345/reviews       Get all reviews for a specific hotel
POST        /api/hotels/12345/reviews       Add review for a specific hotel
GET	        /api/hotels/12345/reviews54321	Get a specific review for a specific hotel	
PUT	        /api/hotels/12345/reviews54321	Update a specific review for a specific hotel	
DELETE  	/api/hotels/12345/reviews54321	Delete a specific review	


Schemas:
path: schema type

Schema types:
string
boolean
number
dates
buffer
mongoId object Id
mixed 
arrays


MongoDB can index coordinates for geolocation
2D - flat plane
2D sphere - for sphere plane

Add ids to hotel reviews in MongoDB:

 db.hotels.update(
... {},
... {$set: {"reviews.0._id": ObjectId()}}, 
... {multi: true})

db.hotels.update(
{name: "Grand Hotel Palatino"},
{$set: {"reviews.1._id": ObjectId()}})

Lecture 31:
Golden Rules of API Design:
 - Always return a response
 - Return the correct HTTP status code
 - Return contents or a message

Feb 6, 2018
Lecture 31 - complete, activity PDF
Error trapping for:
hotels by location
get all reviews
get one review

Feb 7, 2018
finished lecture 33, create update methods for subdocuments in reviews
access through parent docs, must be saved through the parent
combine code from finding a specific review, update hotel, and create new review to solve
