Node.js handled I/O - input/output scalability, not computational scalability. 
Impt that reading from db doesn't slow down the the process
- when asynchronous I/O methods run the use callback functions to deliver data.
Computational blocker - process where code takes quite a while to execute, it blocks the actual named process
- non-blocking computations use spawn processes to run computations separately. 

npm install - will install all dependencies needed 

npm install --production - installs all dependencies except those marked dev

app. set - defines a property of the application
app.get - retreives

Routes:

Separation of concerns - move different types of code into different places to keep them separate from each other
 - separate logic from routing, UI, data models

Level 12
Controller - controls what happens when a certain route is visited.
No hard coded data in route or controllers

Level 13
URL Parameters

query strings for get requests
forms for post requests
paganation - count and offset

Need middleware for posted form - npm body parser

Nodemon - utility that monitors node app for changes and restarts app when changes have been made
-> great for development and never used for production
-> looks in package.json for scripts.start -> use to run
-> configure nodemon with nodemon.json in root folder
    {
    "ignore": ["public/*"] --> ignore all changes in public folder /* means all 
    "verbose": true  --> output is more detailed
    }

MongoDB shell version: 2.6.12
connecting to: test
Server has startup warnings: 
2018-02-03T01:18:30.562+0000 ** WARNING: --rest is specified without --httpinterface,
2018-02-03T01:18:30.562+0000 **          enabling http interface
> show dbs
admin  (empty)
local  0.078GB
> use local
switched to db local
> show collections
startup_log
system.indexes
> use meantest
switched to db meantest
> show dbs
admin  (empty)
local  0.078GB
> show collections
> db.createCollection("tech")
{ "ok" : 1 }
> show dbs
admin     (empty)
local     0.078GB
meantest  0.078GB
> show collections
system.indexes
tech
> db.tech.insert({name: "MongoDB", role: "Database"})
WriteResult({ "nInserted" : 1 })
> db.tech.find()
{ "_id" : ObjectId("5a751172b753db22d4edafdd"), "name" : "MongoDB", "role" : "Database" }
> db.tech.find().pretty()
{
        "_id" : ObjectId("5a751172b753db22d4edafdd"),
        "name" : "MongoDB",
        "role" : "Database"
}
> db.tech.insert(
... [
...     {
...     name: "Express", 
...     role: "Web application server"
...     }, 
...     {
...     name: "Angular", 
...     role: "Front-end framework"
...     },
...     {
...     name: "Node",
...     role: "Platform"
...     }
... ])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 3,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.tech.find().pretty()
{
        "_id" : ObjectId("5a751172b753db22d4edafdd"),
        "name" : "MongoDB",
        "role" : "Database"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafde"),
        "name" : "Express",
        "role" : "Web application server"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafdf"),
        "name" : "Angular",
        "role" : "Front-end framework"
}
{
        "_id" : ObjectId("5a7512e6b753db22d4edafe0"),
        "name" : "Node",
        "role" : "Platform"
}
> 

db.tech.insert(
[
    {
    name: "Express", 
    role: "Web application server"
    }, 
    {
    name: "Angular", 
    role: "Front-end framework"
    },
    {
    name: "Node",
    role: "Platform"
    }
])